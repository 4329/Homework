// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "CANTalon.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<CANTalon> RobotMap::driveTrainLeftFrontMotor;
std::shared_ptr<CANTalon> RobotMap::driveTrainLeftRearMotor;
std::shared_ptr<CANTalon> RobotMap::driveTrainRightFrontMotor;
std::shared_ptr<CANTalon> RobotMap::driveTrainRightRearMotor;
std::shared_ptr<RobotDrive> RobotMap::driveTrainDriveTrainMotors;
std::shared_ptr<DoubleSolenoid> RobotMap::transmissionShift;
std::shared_ptr<CANTalon> RobotMap::climberLeftMotor;
std::shared_ptr<CANTalon> RobotMap::climberRightMotor;
std::shared_ptr<Solenoid> RobotMap::stationGearExtender;
std::shared_ptr<Solenoid> RobotMap::stationGearVent;
std::shared_ptr<Solenoid> RobotMap::stationGearGearFlap;
std::shared_ptr<Solenoid> RobotMap::floorGearPickup;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    driveTrainLeftFrontMotor.reset(new CANTalon(1));
    lw->AddActuator("DriveTrain", "LeftFrontMotor", driveTrainLeftFrontMotor);
    
    driveTrainLeftRearMotor.reset(new CANTalon(2));
    lw->AddActuator("DriveTrain", "LeftRearMotor", driveTrainLeftRearMotor);
    
    driveTrainRightFrontMotor.reset(new CANTalon(3));
    lw->AddActuator("DriveTrain", "RightFrontMotor", driveTrainRightFrontMotor);
    
    driveTrainRightRearMotor.reset(new CANTalon(4));
    lw->AddActuator("DriveTrain", "RightRearMotor", driveTrainRightRearMotor);
    
    driveTrainDriveTrainMotors.reset(new RobotDrive(driveTrainLeftFrontMotor, driveTrainLeftRearMotor,
              driveTrainRightFrontMotor, driveTrainRightRearMotor));
    
    driveTrainDriveTrainMotors->SetSafetyEnabled(false);
        driveTrainDriveTrainMotors->SetExpiration(0.1);
        driveTrainDriveTrainMotors->SetSensitivity(0.5);
        driveTrainDriveTrainMotors->SetMaxOutput(1.0);
        driveTrainDriveTrainMotors->SetInvertedMotor(RobotDrive::kFrontLeftMotor, true);
        driveTrainDriveTrainMotors->SetInvertedMotor(RobotDrive::kRearLeftMotor, true);
    transmissionShift.reset(new DoubleSolenoid(0, 0, 1));
    lw->AddActuator("Transmission", "Shift", transmissionShift);
    
    climberLeftMotor.reset(new CANTalon(10));
    lw->AddActuator("Climber", "LeftMotor", climberLeftMotor);
    
    climberRightMotor.reset(new CANTalon(6));
    lw->AddActuator("Climber", "RightMotor", climberRightMotor);
    
    stationGearExtender.reset(new Solenoid(0, 3));
    lw->AddActuator("StationGear", "Extender", stationGearExtender);
    
    stationGearVent.reset(new Solenoid(0, 4));
    lw->AddActuator("StationGear", "Vent", stationGearVent);
    
    stationGearGearFlap.reset(new Solenoid(0, 7));
    lw->AddActuator("StationGear", "GearFlap", stationGearGearFlap);
    
    floorGearPickup.reset(new Solenoid(0, 5));
    lw->AddActuator("FloorGear", "Pickup", floorGearPickup);
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
